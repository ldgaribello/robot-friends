{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","robot","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","setTimeout","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oPAaeA,G,MAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BAAOC,UAAU,mCACVC,KAAK,SACLC,YAAY,eACZC,SAAUJ,OCIdK,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAK,QAASC,IAAG,+BAA0BJ,EAA1B,cACtB,4BAAKC,GACL,2BAAIC,KCUDG,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGf,OACI,6BACKA,EAAOC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMC,IAAKD,EAAMR,GACXA,GAAIQ,EAAMR,GACVC,KAAMO,EAAMP,KACZC,MAAOM,EAAMN,aCFpBQ,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCmBJC,E,kDArBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CAACC,UAAU,GAFT,E,8DAKDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SAEP,6BACI,yCAIJG,KAAKX,MAAMK,a,GAlBCQ,aCwDbC,E,kDAhDX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTZ,OAAQ,GACRsB,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFC,YAAW,WACP,EAAKb,SAAS,CAACjB,OAAQ6B,MACxB,U,+BAQL,IAAD,EACyBb,KAAKJ,MAA5BZ,EADF,EACEA,OAAQsB,EADV,EACUA,YAETS,EAAiB/B,EAAOgC,QAAO,SAAA9B,GACjC,OAAOA,EAAMP,KAAKsC,cAAcC,SAASZ,EAAYW,kBAGzD,OAAsB,IAAlBjC,EAAOmC,OACA,wBAAI9C,UAAU,SAAd,cAGH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWD,aAAc4B,KAAKI,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAQ+B,W,GAxC5Bb,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.5fbf1564.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n                   type=\"search\"\n                   placeholder=\"Search Robot\"\n                   onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt={'Robot'} src={`https://robohash.org/${id}?200x200`}/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    // throw new Error('Crash');\n\n    return (\n        <div>\n            {robots.map((robot) =>\n                <Card key={robot.id}\n                      id={robot.id}\n                      name={robot.name}\n                      email={robot.email}/>)}\n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {hasError: false};\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <div>\n                    <h1>Ooops!!!</h1>\n                </div>\n            )\n        }\n        return (this.props.children)\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from \"react\";\n\nimport './App.css';\n\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n                setTimeout(() => {\n                    this.setState({robots: users})\n                }, 1000)\n            })\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n    }\n\n    render() {\n        const {robots, searchField} = this.state;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        if (robots.length === 0) {\n            return <h1 className=\"tc f2\">Loading...</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className=\"f2\">Robot Friends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'tachyons'\n\nimport App from \"./containers/App\";\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}